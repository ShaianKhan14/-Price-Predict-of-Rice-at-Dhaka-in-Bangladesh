# -*- coding: utf-8 -*-
"""Shaian's Copy of Rice_Price_Using_ARIMA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y6osa_UZqajcaTMr3yo_ZS5akRD0fmdt
"""

import warnings
import itertools
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import statsmodels.api as sm
import matplotlib
warnings.filterwarnings("ignore")
plt.style.use('fivethirtyeight')
matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'

from flask import Flask, request, jsonify, render_template
import pickle

#Load Data
url = 'https://api.foodsecurityportal.org/en/datastore/dump/1daac0af-9c6c-5b9f-b879-5dbb42f2d4b5'
df = pd.read_csv(url)
df.head(10)

df = df.drop(['_id'], axis=1)
df = df.drop(['db_id'], axis=1)
df = df.drop(['commodity'], axis=1)
df = df.drop(['unit'], axis=1)
df = df.drop(['source_name'], axis=1)
df = df.drop(['source_url'], axis=1)
df = df.drop(['minPrice'], axis=1)
df = df.drop(['maxPrice'], axis=1)
df = df.drop(['percentageChange'], axis=1)
df = df.drop(['last_sync'], axis=1)

df.head()

df.tail()

df.isnull().sum()

df.shape

df['date'] = pd.to_datetime(df['date'], infer_datetime_format=True)
df = df.set_index(['date'])

from datetime import datetime
df.head()

conversion_rate = 85.33
df['price'] = conversion_rate * df['price']
df.head()

df = df.groupby('date')['price'].sum().reset_index()

df = df.set_index('date')
df.index

df = df['price'].resample('MS').mean()

df['2017':]

df.plot(figsize=(15, 6))
plt.show()

from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
decomposition = sm.tsa.seasonal_decompose(df, model='additive')
fig = decomposition.plot()
plt.show()

p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]
print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))

data = []
for param in pdq:
  for param_seasonal in seasonal_pdq:
    try:
      mod = sm.tsa.statespace.SARIMAX(df_month.Weighted_Price_box, order=param, seasonal_order=param_seasonal, enforce_stationarity=False, enforce_invertibility=False)
      results = mod.fit()
      print('ARIMA{}x{}12 - AIC:{}'.format(param, param_seasonal, results.aic))
      data.append({'parameters' : [param], 'aic' : [results.aic]})
    except:
      continue

mod = sm.tsa.statespace.SARIMAX(df,
                                order=(1, 1, 1),
                                seasonal_order=(1, 1, 0, 12),
                                enforce_stationarity=False,
                                enforce_invertibility=False)
results = mod.fit()
print(results.summary().tables[1])

results.plot_diagnostics(figsize=(16, 16))
plt.show()

pred = results.get_prediction(start=pd.to_datetime('2017-01-01'), dynamic=False)
pred_ci = pred.conf_int()
ax = df['2014':].plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)
ax.set_xlabel('Date')
ax.set_ylabel('Price')
plt.legend()
plt.show()

df_forecasted = pred.predicted_mean
df_truth = df['2017-01-01':]
mse = ((df_forecasted - df_truth) ** 2).mean()
print('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))

print('The Root Mean Squared Error of our forecasts is {}'.format(round(np.sqrt(mse), 2)))

#Mean Absolute Percentage Error (MAPE)
MAPE = np.mean((np.abs(np.subtract(df_truth, df_forecasted )/ df_truth))) * 100
print('Mean Absolute Percentage Error (MAPE): ' + str(np.round(MAPE, 2)) + ' %')

#Mean Percentage Error (MAPE)
MPE = np.mean((np.subtract(df_truth, df_forecasted )/ df_truth)) * 100
print('Mean Percentage Error (MPE): ' + str(np.round(MPE, 2)) + ' %')

pred_uc = results.get_forecast(steps=30)
pred_ci = pred_uc.conf_int()
ax = df.plot(label='observed', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Price')
plt.legend()
plt.show()

pred_uc.predicted_mean

plotdata = pd.DataFrame({
    "Model Error For Dhaka":[6.16, 2.48, -0.43, 3.88],
    "Model Error For Delhi":[2.12, 1.46, 0.22, 2.69]
    }, 
    index=["MSE", "RMSE", "MPE", "MAPE", ]
)
plotdata.plot(kind="bar")
plt.title("Comparison between error")
plt.xlabel("Error Metrics")
plt.ylabel("Error Value")

# Saving model to disk
pickle.dump(results, open('model.pkl','wb'))

# Loading model to compare the results
model = pickle.load(open('model.pkl','rb'))